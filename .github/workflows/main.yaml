name: CI/CD

on:
  workflow_dispatch:  # Allows manual triggering
  pull_request:  # Runs on pull requests
    branches: [ master ]  # When targeting main branch
  release:
    types: [ published ]  # Runs when a release is published

env:
  CIBW_TEST_REQUIRES: pytest
  CIBW_TEST_COMMAND: "pytest tests"

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.7", "3.8", "3.9", "3.10", "3.11", "3.12"]

    steps:
      - uses: actions/checkout@v3
        with:
          submodules: 'recursive' 
      
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install ".[dev]"
          
      - name: Run tests
        run: |
          pytest tests/

  build_wheels:
    name: Build wheels on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-13, macos-latest]

    steps:
      - uses: actions/checkout@v4

      # Used to host cibuildwheel
      - uses: actions/setup-python@v5

      - name: Install cibuildwheel
        run: python -m pip install cibuildwheel==2.22.0

      - name: Build wheels
        run: python -m cibuildwheel --output-dir wheelhouse

      - uses: actions/upload-artifact@v4
        with:
          name: cibw-wheels-${{ matrix.os }}-${{ strategy.job-index }}
          path: ./wheelhouse/*.whl


  # publish:
  #   needs: test
  #   runs-on: ubuntu-latest
  #   if: github.event_name == 'release' && github.event.action == 'published'
    
  #   steps:
  #     - uses: actions/checkout@v3
      
  #     - name: Set up Python
  #       uses: actions/setup-python@v4
  #       with:
  #         python-version: "3.11"
          
  #     - name: Install dependencies
  #       run: |
  #         python -m pip install --upgrade pip
  #         pip install build twine
          
  #     - name: Build package
  #       run: python -m build
        
  #     - name: Publish to PyPI
  #       env:
  #         TWINE_USERNAME: __token__
  #         TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
  #       run: twine upload dist/*
